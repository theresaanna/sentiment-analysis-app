# docker-compose.yml
version: '3.8'

services:
  # Redis - Message broker and result backend for Celery
  redis:
    image: redis:7-alpine
    container_name: sentiment_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sentiment_network

  # Flask Backend API
  flask_backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: sentiment_flask
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-fallback-secret-key}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs  # Mount logs directory
      - ./.env:/app/.env:ro  # Mount environment file (read-only)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sentiment_network

  # Celery Worker - Handles sentiment analysis tasks
  celery_worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: sentiment_celery_worker
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-4}
      - CELERY_TASK_TIME_LIMIT=${CELERY_TASK_TIME_LIMIT:-300}
    depends_on:
      redis:
        condition: service_healthy
      flask_backend:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    command: celery -A tasks.instagram_sentiment_tasks worker --loglevel=info --queues=instagram_queue,batch_queue --concurrency=4
    healthcheck:
      test: ["CMD-SHELL", "celery -A tasks.instagram_sentiment_tasks inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sentiment_network

  # Celery Flower - Task monitoring (optional, for development)
  celery_flower:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: sentiment_flower
    restart: unless-stopped
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_BASIC_AUTH:-admin:password}
    depends_on:
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_healthy
    volumes:
      - ./.env:/app/.env:ro
    command: celery -A tasks.instagram_sentiment_tasks flower --port=5555 --basic_auth=admin:password
    profiles:
      - monitoring  # Optional service, start with: docker-compose --profile monitoring up
    networks:
      - sentiment_network

  # React Frontend
  react_frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sentiment_react
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
      - REACT_APP_ENV=${REACT_APP_ENV:-production}
    depends_on:
      flask_backend:
        condition: service_healthy
    volumes:
      - ./frontend:/app  # For development, mount source code
      - /app/node_modules  # Anonymous volume to preserve node_modules
    profiles:
      - frontend  # Optional, if you want to run frontend separately
    networks:
      - sentiment_network

  # Nginx - Reverse proxy and static file serving (for production)
  nginx:
    image: nginx:alpine
    container_name: sentiment_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./logs/nginx:/var/log/nginx
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates (if you have them)
    depends_on:
      - flask_backend
      - react_frontend
    profiles:
      - production  # Only for production deployment
    networks:
      - sentiment_network

volumes:
  redis_data:
    driver: local

networks:
  sentiment_network:
    driver: bridge